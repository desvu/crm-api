// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateGameInput struct {
	Title         string               `json:"title"`
	Slug          string               `json:"slug"`
	Summary       *string              `json:"summary"`
	Description   *string              `json:"description"`
	Type          GameType             `json:"type"`
	Developers    []int                `json:"developers"`
	Publishers    []int                `json:"publishers"`
	ReleaseDate   *time.Time           `json:"releaseDate"`
	License       *string              `json:"license"`
	Ranking       *string              `json:"ranking"`
	Genres        []int                `json:"genres"`
	Tags          []int                `json:"tags"`
	Features      []int                `json:"features"`
	Localizations []*LocalizationInput `json:"localizations"`
	Platforms     []GamePlatform       `json:"platforms"`
}

type Developer struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Feature struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Icon string `json:"icon"`
}

type Game struct {
	ID       string    `json:"id"`
	Revision *Revision `json:"revision"`
}

type Genre struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Localization struct {
	Language  string `json:"language"`
	Interface bool   `json:"interface"`
	Audio     bool   `json:"audio"`
	Subtitles bool   `json:"subtitles"`
}

type LocalizationInput struct {
	Language  string `json:"language"`
	Interface bool   `json:"interface"`
	Audio     bool   `json:"audio"`
	Subtitles bool   `json:"subtitles"`
}

type Pricing struct {
	Price    *float64 `json:"price"`
	Currency *string  `json:"currency"`
	Discount *int     `json:"discount"`
}

type Publisher struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Rating struct {
	Agency string `json:"agency"`
}

type Review struct {
	URL       *string `json:"url"`
	Score     *int    `json:"score"`
	Quote     *string `json:"quote"`
	PressName *string `json:"pressName"`
	Author    *string `json:"author"`
}

type Reviews struct {
	Score  *int      `json:"score"`
	Review []*Review `json:"review"`
}

type Revision struct {
	ID            string          `json:"id"`
	GameID        string          `json:"gameID"`
	Slug          string          `json:"slug"`
	Title         string          `json:"title"`
	Summary       string          `json:"summary"`
	Type          GameType        `json:"type"`
	Description   string          `json:"description"`
	Developers    []*Developer    `json:"developers"`
	Publishers    []*Publisher    `json:"publishers"`
	ReleaseDate   string          `json:"releaseDate"`
	License       string          `json:"license"`
	Ranking       string          `json:"ranking"`
	Genres        []*Genre        `json:"genres"`
	Tags          []*Tag          `json:"tags"`
	Features      []*Feature      `json:"features"`
	Localizations []*Localization `json:"localizations"`
	Platforms     []GamePlatform  `json:"platforms"`
}

type Tag struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UpdateGameInput struct {
	ID            string               `json:"ID"`
	Title         *string              `json:"title"`
	Slug          *string              `json:"slug"`
	Summary       *string              `json:"summary"`
	Description   *string              `json:"description"`
	Developers    []int                `json:"developers"`
	Publishers    []int                `json:"publishers"`
	ReleaseDate   *string              `json:"releaseDate"`
	License       *string              `json:"license"`
	Ranking       *string              `json:"ranking"`
	Genres        []int                `json:"genres"`
	Tags          []int                `json:"tags"`
	Features      []int                `json:"features"`
	Localizations []*LocalizationInput `json:"localizations"`
	Platforms     []GamePlatform       `json:"platforms"`
}

type GamePlatform string

const (
	GamePlatformLinux   GamePlatform = "linux"
	GamePlatformMacOs   GamePlatform = "macOS"
	GamePlatformWindows GamePlatform = "windows"
	GamePlatformWeb     GamePlatform = "web"
)

var AllGamePlatform = []GamePlatform{
	GamePlatformLinux,
	GamePlatformMacOs,
	GamePlatformWindows,
	GamePlatformWeb,
}

func (e GamePlatform) IsValid() bool {
	switch e {
	case GamePlatformLinux, GamePlatformMacOs, GamePlatformWindows, GamePlatformWeb:
		return true
	}
	return false
}

func (e GamePlatform) String() string {
	return string(e)
}

func (e *GamePlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GamePlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GamePlatform", str)
	}
	return nil
}

func (e GamePlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GameType string

const (
	GameTypeWeb     GameType = "web"
	GameTypeDesktop GameType = "desktop"
)

var AllGameType = []GameType{
	GameTypeWeb,
	GameTypeDesktop,
}

func (e GameType) IsValid() bool {
	switch e {
	case GameTypeWeb, GameTypeDesktop:
		return true
	}
	return false
}

func (e GameType) String() string {
	return string(e)
}

func (e *GameType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameType", str)
	}
	return nil
}

func (e GameType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
