// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type Developer struct {
	Name string `json:"name"`
}

type Feature struct {
	Name string `json:"name"`
}

type Game struct {
	ID           string                `json:"id"`
	Type         GameType              `json:"type"`
	Slug         string                `json:"slug"`
	Title        string                `json:"title"`
	Summary      []*LString            `json:"summary"`
	Description  []*LString            `json:"description"`
	Developers   []*Developer          `json:"developers"`
	Publishers   []*Publisher          `json:"publishers"`
	ReleaseDate  *string               `json:"releaseDate"`
	License      *string               `json:"license"`
	Ranking      *string               `json:"ranking"`
	Genres       []*Genre              `json:"genres"`
	Tags         []*Tag                `json:"tags"`
	Features     []*Feature            `json:"features"`
	Languages    []*Language           `json:"languages"`
	Platforms    []Platform            `json:"platforms"`
	Requirements []*SystemRequirements `json:"requirements"`
	Media        *Media                `json:"media"`
	Reviews      *Reviews              `json:"reviews"`
	Ratings      []*Rating             `json:"ratings"`
	Pricing      *Pricing              `json:"pricing"`
}

type Genre struct {
	Name string `json:"name"`
}

type Image struct {
	URL string `json:"url"`
}

type LString struct {
	Locale *string `json:"locale"`
	Value  *string `json:"value"`
}

type Language struct {
	Language  string `json:"language"`
	Interface bool   `json:"interface"`
	Audio     bool   `json:"audio"`
	Subtitles bool   `json:"subtitles"`
}

type Media struct {
	Screenshots []*Image `json:"screenshots"`
	Trailers    []*Video `json:"trailers"`
}

type Pricing struct {
	Price    *float64 `json:"price"`
	Currency *string  `json:"currency"`
	Discount *int     `json:"discount"`
}

type Publisher struct {
	Name string `json:"name"`
}

type Rating struct {
	Agency string `json:"agency"`
}

type RequirementsSet struct {
	CPU       *string `json:"cpu"`
	DiskSpace *string `json:"diskSpace"`
	Gpu       *string `json:"gpu"`
	Os        *string `json:"os"`
	RAM       *string `json:"ram"`
}

type Review struct {
	URL       *string `json:"url"`
	Score     *int    `json:"score"`
	Quote     *string `json:"quote"`
	PressName *string `json:"pressName"`
	Author    *string `json:"author"`
}

type Reviews struct {
	Score  *int      `json:"score"`
	Review []*Review `json:"review"`
}

type SystemRequirements struct {
	Platform    string           `json:"platform"`
	Minimal     *RequirementsSet `json:"minimal"`
	Recommended *RequirementsSet `json:"recommended"`
}

type Tag struct {
	Name string `json:"name"`
}

type Video struct {
	URL string `json:"url"`
}

type GameType string

const (
	GameTypeWeb     GameType = "Web"
	GameTypeDesktop GameType = "Desktop"
)

var AllGameType = []GameType{
	GameTypeWeb,
	GameTypeDesktop,
}

func (e GameType) IsValid() bool {
	switch e {
	case GameTypeWeb, GameTypeDesktop:
		return true
	}
	return false
}

func (e GameType) String() string {
	return string(e)
}

func (e *GameType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameType", str)
	}
	return nil
}

func (e GameType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Platform string

const (
	PlatformLinux   Platform = "Linux"
	PlatformMacOs   Platform = "MacOS"
	PlatformWindows Platform = "Windows"
	PlatformWeb     Platform = "Web"
)

var AllPlatform = []Platform{
	PlatformLinux,
	PlatformMacOs,
	PlatformWindows,
	PlatformWeb,
}

func (e Platform) IsValid() bool {
	switch e {
	case PlatformLinux, PlatformMacOs, PlatformWindows, PlatformWeb:
		return true
	}
	return false
}

func (e Platform) String() string {
	return string(e)
}

func (e *Platform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Platform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Platform", str)
	}
	return nil
}

func (e Platform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
