// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/repository (interfaces: GameDeveloperRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	reflect "reflect"
)

// MockGameDeveloperRepository is a mock of GameDeveloperRepository interface
type MockGameDeveloperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameDeveloperRepositoryMockRecorder
}

// MockGameDeveloperRepositoryMockRecorder is the mock recorder for MockGameDeveloperRepository
type MockGameDeveloperRepositoryMockRecorder struct {
	mock *MockGameDeveloperRepository
}

// NewMockGameDeveloperRepository creates a new mock instance
func NewMockGameDeveloperRepository(ctrl *gomock.Controller) *MockGameDeveloperRepository {
	mock := &MockGameDeveloperRepository{ctrl: ctrl}
	mock.recorder = &MockGameDeveloperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameDeveloperRepository) EXPECT() *MockGameDeveloperRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockGameDeveloperRepository) Create(arg0 context.Context, arg1 *entity.GameDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockGameDeveloperRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameDeveloperRepository)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method
func (m *MockGameDeveloperRepository) CreateMultiple(arg0 context.Context, arg1 []entity.GameDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiple indicates an expected call of CreateMultiple
func (mr *MockGameDeveloperRepositoryMockRecorder) CreateMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockGameDeveloperRepository)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method
func (m *MockGameDeveloperRepository) Delete(arg0 context.Context, arg1 *entity.GameDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGameDeveloperRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameDeveloperRepository)(nil).Delete), arg0, arg1)
}

// DeleteMultiple mocks base method
func (m *MockGameDeveloperRepository) DeleteMultiple(arg0 context.Context, arg1 []entity.GameDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiple indicates an expected call of DeleteMultiple
func (mr *MockGameDeveloperRepositoryMockRecorder) DeleteMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiple", reflect.TypeOf((*MockGameDeveloperRepository)(nil).DeleteMultiple), arg0, arg1)
}

// FindByDeveloperID mocks base method
func (m *MockGameDeveloperRepository) FindByDeveloperID(arg0 context.Context, arg1 uint) ([]entity.GameDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDeveloperID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDeveloperID indicates an expected call of FindByDeveloperID
func (mr *MockGameDeveloperRepositoryMockRecorder) FindByDeveloperID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDeveloperID", reflect.TypeOf((*MockGameDeveloperRepository)(nil).FindByDeveloperID), arg0, arg1)
}

// FindByGameID mocks base method
func (m *MockGameDeveloperRepository) FindByGameID(arg0 context.Context, arg1 uint) ([]entity.GameDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameID indicates an expected call of FindByGameID
func (mr *MockGameDeveloperRepositoryMockRecorder) FindByGameID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameID", reflect.TypeOf((*MockGameDeveloperRepository)(nil).FindByGameID), arg0, arg1)
}

// FindByGameIDAndDeveloperIDs mocks base method
func (m *MockGameDeveloperRepository) FindByGameIDAndDeveloperIDs(arg0 context.Context, arg1 uint, arg2 []uint) ([]entity.GameDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameIDAndDeveloperIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.GameDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameIDAndDeveloperIDs indicates an expected call of FindByGameIDAndDeveloperIDs
func (mr *MockGameDeveloperRepositoryMockRecorder) FindByGameIDAndDeveloperIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameIDAndDeveloperIDs", reflect.TypeOf((*MockGameDeveloperRepository)(nil).FindByGameIDAndDeveloperIDs), arg0, arg1, arg2)
}
