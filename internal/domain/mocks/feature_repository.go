// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/repository (interfaces: FeatureRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	reflect "reflect"
)

// MockFeatureRepository is a mock of FeatureRepository interface
type MockFeatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureRepositoryMockRecorder
}

// MockFeatureRepositoryMockRecorder is the mock recorder for MockFeatureRepository
type MockFeatureRepositoryMockRecorder struct {
	mock *MockFeatureRepository
}

// NewMockFeatureRepository creates a new mock instance
func NewMockFeatureRepository(ctrl *gomock.Controller) *MockFeatureRepository {
	mock := &MockFeatureRepository{ctrl: ctrl}
	mock.recorder = &MockFeatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeatureRepository) EXPECT() *MockFeatureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFeatureRepository) Create(arg0 context.Context, arg1 *entity.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockFeatureRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeatureRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockFeatureRepository) Delete(arg0 context.Context, arg1 *entity.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFeatureRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeatureRepository)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method
func (m *MockFeatureRepository) FindAll(arg0 context.Context) ([]entity.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]entity.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockFeatureRepositoryMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFeatureRepository)(nil).FindAll), arg0)
}

// FindByID mocks base method
func (m *MockFeatureRepository) FindByID(arg0 context.Context, arg1 uint) (*entity.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockFeatureRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockFeatureRepository)(nil).FindByID), arg0, arg1)
}

// FindByIDs mocks base method
func (m *MockFeatureRepository) FindByIDs(arg0 context.Context, arg1 []uint) ([]entity.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", arg0, arg1)
	ret0, _ := ret[0].([]entity.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs
func (mr *MockFeatureRepositoryMockRecorder) FindByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockFeatureRepository)(nil).FindByIDs), arg0, arg1)
}

// Update mocks base method
func (m *MockFeatureRepository) Update(arg0 context.Context, arg1 *entity.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockFeatureRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeatureRepository)(nil).Update), arg0, arg1)
}
