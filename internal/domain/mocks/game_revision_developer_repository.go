// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/repository (interfaces: GameRevisionDeveloperRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	reflect "reflect"
)

// MockGameRevisionDeveloperRepository is a mock of GameRevisionDeveloperRepository interface
type MockGameRevisionDeveloperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameRevisionDeveloperRepositoryMockRecorder
}

// MockGameRevisionDeveloperRepositoryMockRecorder is the mock recorder for MockGameRevisionDeveloperRepository
type MockGameRevisionDeveloperRepositoryMockRecorder struct {
	mock *MockGameRevisionDeveloperRepository
}

// NewMockGameRevisionDeveloperRepository creates a new mock instance
func NewMockGameRevisionDeveloperRepository(ctrl *gomock.Controller) *MockGameRevisionDeveloperRepository {
	mock := &MockGameRevisionDeveloperRepository{ctrl: ctrl}
	mock.recorder = &MockGameRevisionDeveloperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameRevisionDeveloperRepository) EXPECT() *MockGameRevisionDeveloperRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockGameRevisionDeveloperRepository) Create(arg0 context.Context, arg1 *entity.GameRevisionDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method
func (m *MockGameRevisionDeveloperRepository) CreateMultiple(arg0 context.Context, arg1 []entity.GameRevisionDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiple indicates an expected call of CreateMultiple
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) CreateMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method
func (m *MockGameRevisionDeveloperRepository) Delete(arg0 context.Context, arg1 *entity.GameRevisionDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).Delete), arg0, arg1)
}

// DeleteMultiple mocks base method
func (m *MockGameRevisionDeveloperRepository) DeleteMultiple(arg0 context.Context, arg1 []entity.GameRevisionDeveloper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiple indicates an expected call of DeleteMultiple
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) DeleteMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiple", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).DeleteMultiple), arg0, arg1)
}

// FindByDeveloperID mocks base method
func (m *MockGameRevisionDeveloperRepository) FindByDeveloperID(arg0 context.Context, arg1 uint) ([]entity.GameRevisionDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDeveloperID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDeveloperID indicates an expected call of FindByDeveloperID
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) FindByDeveloperID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDeveloperID", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).FindByDeveloperID), arg0, arg1)
}

// FindByGameRevisionID mocks base method
func (m *MockGameRevisionDeveloperRepository) FindByGameRevisionID(arg0 context.Context, arg1 uint) ([]entity.GameRevisionDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionID indicates an expected call of FindByGameRevisionID
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) FindByGameRevisionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionID", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).FindByGameRevisionID), arg0, arg1)
}

// FindByGameRevisionIDAndDeveloperIDs mocks base method
func (m *MockGameRevisionDeveloperRepository) FindByGameRevisionIDAndDeveloperIDs(arg0 context.Context, arg1 uint, arg2 []uint) ([]entity.GameRevisionDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionIDAndDeveloperIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.GameRevisionDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionIDAndDeveloperIDs indicates an expected call of FindByGameRevisionIDAndDeveloperIDs
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) FindByGameRevisionIDAndDeveloperIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionIDAndDeveloperIDs", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).FindByGameRevisionIDAndDeveloperIDs), arg0, arg1, arg2)
}

// FindByGameRevisionIDs mocks base method
func (m *MockGameRevisionDeveloperRepository) FindByGameRevisionIDs(arg0 context.Context, arg1 []uint) ([]entity.GameRevisionDeveloper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionIDs", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionDeveloper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionIDs indicates an expected call of FindByGameRevisionIDs
func (mr *MockGameRevisionDeveloperRepositoryMockRecorder) FindByGameRevisionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionIDs", reflect.TypeOf((*MockGameRevisionDeveloperRepository)(nil).FindByGameRevisionIDs), arg0, arg1)
}
