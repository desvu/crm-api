// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/repository (interfaces: GameTagRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	reflect "reflect"
)

// MockGameTagRepository is a mock of GameTagRepository interface
type MockGameTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameTagRepositoryMockRecorder
}

// MockGameTagRepositoryMockRecorder is the mock recorder for MockGameTagRepository
type MockGameTagRepositoryMockRecorder struct {
	mock *MockGameTagRepository
}

// NewMockGameTagRepository creates a new mock instance
func NewMockGameTagRepository(ctrl *gomock.Controller) *MockGameTagRepository {
	mock := &MockGameTagRepository{ctrl: ctrl}
	mock.recorder = &MockGameTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameTagRepository) EXPECT() *MockGameTagRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockGameTagRepository) Create(arg0 context.Context, arg1 *entity.GameTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockGameTagRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameTagRepository)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method
func (m *MockGameTagRepository) CreateMultiple(arg0 context.Context, arg1 []entity.GameTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiple indicates an expected call of CreateMultiple
func (mr *MockGameTagRepositoryMockRecorder) CreateMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockGameTagRepository)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method
func (m *MockGameTagRepository) Delete(arg0 context.Context, arg1 *entity.GameTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGameTagRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameTagRepository)(nil).Delete), arg0, arg1)
}

// DeleteMultiple mocks base method
func (m *MockGameTagRepository) DeleteMultiple(arg0 context.Context, arg1 []entity.GameTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiple indicates an expected call of DeleteMultiple
func (mr *MockGameTagRepositoryMockRecorder) DeleteMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiple", reflect.TypeOf((*MockGameTagRepository)(nil).DeleteMultiple), arg0, arg1)
}

// FindByGameID mocks base method
func (m *MockGameTagRepository) FindByGameID(arg0 context.Context, arg1 uint) ([]entity.GameTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameID indicates an expected call of FindByGameID
func (mr *MockGameTagRepositoryMockRecorder) FindByGameID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameID", reflect.TypeOf((*MockGameTagRepository)(nil).FindByGameID), arg0, arg1)
}

// FindByGameIDAndTagIDs mocks base method
func (m *MockGameTagRepository) FindByGameIDAndTagIDs(arg0 context.Context, arg1 uint, arg2 []uint) ([]entity.GameTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameIDAndTagIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.GameTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameIDAndTagIDs indicates an expected call of FindByGameIDAndTagIDs
func (mr *MockGameTagRepositoryMockRecorder) FindByGameIDAndTagIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameIDAndTagIDs", reflect.TypeOf((*MockGameTagRepository)(nil).FindByGameIDAndTagIDs), arg0, arg1, arg2)
}

// FindByTagID mocks base method
func (m *MockGameTagRepository) FindByTagID(arg0 context.Context, arg1 uint) ([]entity.GameTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTagID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTagID indicates an expected call of FindByTagID
func (mr *MockGameTagRepositoryMockRecorder) FindByTagID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTagID", reflect.TypeOf((*MockGameTagRepository)(nil).FindByTagID), arg0, arg1)
}
