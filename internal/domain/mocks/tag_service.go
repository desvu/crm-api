// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/service (interfaces: ITagService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	service "github.com/qilin/crm-api/internal/domain/service"
	reflect "reflect"
)

// MockITagService is a mock of ITagService interface
type MockITagService struct {
	ctrl     *gomock.Controller
	recorder *MockITagServiceMockRecorder
}

// MockITagServiceMockRecorder is the mock recorder for MockITagService
type MockITagServiceMockRecorder struct {
	mock *MockITagService
}

// NewMockITagService creates a new mock instance
func NewMockITagService(ctrl *gomock.Controller) *MockITagService {
	mock := &MockITagService{ctrl: ctrl}
	mock.recorder = &MockITagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITagService) EXPECT() *MockITagServiceMockRecorder {
	return m.recorder
}

// AttachTagsToGame mocks base method
func (m *MockITagService) AttachTagsToGame(arg0 context.Context, arg1 uint, arg2 []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTagsToGame", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachTagsToGame indicates an expected call of AttachTagsToGame
func (mr *MockITagServiceMockRecorder) AttachTagsToGame(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTagsToGame", reflect.TypeOf((*MockITagService)(nil).AttachTagsToGame), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockITagService) Create(arg0 context.Context, arg1 *service.CreateTagData) (*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockITagServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITagService)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockITagService) Delete(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockITagServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITagService)(nil).Delete), arg0, arg1)
}

// DetachTagsFromGame mocks base method
func (m *MockITagService) DetachTagsFromGame(arg0 context.Context, arg1 uint, arg2 []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTagsFromGame", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachTagsFromGame indicates an expected call of DetachTagsFromGame
func (mr *MockITagServiceMockRecorder) DetachTagsFromGame(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTagsFromGame", reflect.TypeOf((*MockITagService)(nil).DetachTagsFromGame), arg0, arg1, arg2)
}

// GetByGameID mocks base method
func (m *MockITagService) GetByGameID(arg0 context.Context, arg1 uint) ([]entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGameID", arg0, arg1)
	ret0, _ := ret[0].([]entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGameID indicates an expected call of GetByGameID
func (mr *MockITagServiceMockRecorder) GetByGameID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGameID", reflect.TypeOf((*MockITagService)(nil).GetByGameID), arg0, arg1)
}

// GetByID mocks base method
func (m *MockITagService) GetByID(arg0 context.Context, arg1 uint) (*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockITagServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITagService)(nil).GetByID), arg0, arg1)
}

// GetByIDs mocks base method
func (m *MockITagService) GetByIDs(arg0 context.Context, arg1 []uint) ([]entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", arg0, arg1)
	ret0, _ := ret[0].([]entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs
func (mr *MockITagServiceMockRecorder) GetByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockITagService)(nil).GetByIDs), arg0, arg1)
}

// GetExistByID mocks base method
func (m *MockITagService) GetExistByID(arg0 context.Context, arg1 uint) (*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistByID indicates an expected call of GetExistByID
func (mr *MockITagServiceMockRecorder) GetExistByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistByID", reflect.TypeOf((*MockITagService)(nil).GetExistByID), arg0, arg1)
}

// Update mocks base method
func (m *MockITagService) Update(arg0 context.Context, arg1 *service.UpdateTagData) (*entity.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entity.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockITagServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITagService)(nil).Update), arg0, arg1)
}
