// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qilin/crm-api/internal/domain/repository (interfaces: GameRevisionFeatureRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/qilin/crm-api/internal/domain/entity"
	reflect "reflect"
)

// MockGameRevisionFeatureRepository is a mock of GameRevisionFeatureRepository interface
type MockGameRevisionFeatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameRevisionFeatureRepositoryMockRecorder
}

// MockGameRevisionFeatureRepositoryMockRecorder is the mock recorder for MockGameRevisionFeatureRepository
type MockGameRevisionFeatureRepositoryMockRecorder struct {
	mock *MockGameRevisionFeatureRepository
}

// NewMockGameRevisionFeatureRepository creates a new mock instance
func NewMockGameRevisionFeatureRepository(ctrl *gomock.Controller) *MockGameRevisionFeatureRepository {
	mock := &MockGameRevisionFeatureRepository{ctrl: ctrl}
	mock.recorder = &MockGameRevisionFeatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGameRevisionFeatureRepository) EXPECT() *MockGameRevisionFeatureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockGameRevisionFeatureRepository) Create(arg0 context.Context, arg1 *entity.GameRevisionFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).Create), arg0, arg1)
}

// CreateMultiple mocks base method
func (m *MockGameRevisionFeatureRepository) CreateMultiple(arg0 context.Context, arg1 []entity.GameRevisionFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiple indicates an expected call of CreateMultiple
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) CreateMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).CreateMultiple), arg0, arg1)
}

// Delete mocks base method
func (m *MockGameRevisionFeatureRepository) Delete(arg0 context.Context, arg1 *entity.GameRevisionFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).Delete), arg0, arg1)
}

// DeleteMultiple mocks base method
func (m *MockGameRevisionFeatureRepository) DeleteMultiple(arg0 context.Context, arg1 []entity.GameRevisionFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultiple", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiple indicates an expected call of DeleteMultiple
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) DeleteMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiple", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).DeleteMultiple), arg0, arg1)
}

// FindByFeatureID mocks base method
func (m *MockGameRevisionFeatureRepository) FindByFeatureID(arg0 context.Context, arg1 uint) ([]entity.GameRevisionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFeatureID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFeatureID indicates an expected call of FindByFeatureID
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) FindByFeatureID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFeatureID", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).FindByFeatureID), arg0, arg1)
}

// FindByGameRevisionID mocks base method
func (m *MockGameRevisionFeatureRepository) FindByGameRevisionID(arg0 context.Context, arg1 uint) ([]entity.GameRevisionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionID", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionID indicates an expected call of FindByGameRevisionID
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) FindByGameRevisionID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionID", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).FindByGameRevisionID), arg0, arg1)
}

// FindByGameRevisionIDAndFeatureIDs mocks base method
func (m *MockGameRevisionFeatureRepository) FindByGameRevisionIDAndFeatureIDs(arg0 context.Context, arg1 uint, arg2 []uint) ([]entity.GameRevisionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionIDAndFeatureIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.GameRevisionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionIDAndFeatureIDs indicates an expected call of FindByGameRevisionIDAndFeatureIDs
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) FindByGameRevisionIDAndFeatureIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionIDAndFeatureIDs", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).FindByGameRevisionIDAndFeatureIDs), arg0, arg1, arg2)
}

// FindByGameRevisionIDs mocks base method
func (m *MockGameRevisionFeatureRepository) FindByGameRevisionIDs(arg0 context.Context, arg1 []uint) ([]entity.GameRevisionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGameRevisionIDs", arg0, arg1)
	ret0, _ := ret[0].([]entity.GameRevisionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGameRevisionIDs indicates an expected call of FindByGameRevisionIDs
func (mr *MockGameRevisionFeatureRepositoryMockRecorder) FindByGameRevisionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGameRevisionIDs", reflect.TypeOf((*MockGameRevisionFeatureRepository)(nil).FindByGameRevisionIDs), arg0, arg1)
}
